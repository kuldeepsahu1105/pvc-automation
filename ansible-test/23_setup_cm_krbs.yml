### ansible-playbook -i inventory.ini 23_setup_cm_krbs.yml
# vars:
#   cm_private_key_path: "/root/.ssh/id_rsa" 
#   cm_priv_key_passphrase: "" 
#   use_freeipa_for_crt_mgmt: false 
#   cm_srvr_sudo_user: "root"
#   cm_node_sudo_password: ""  # Alternate Option for Priv Key based AutoTLS setup

### ansible-playbook -i inventory.ini 21_enable_cm_kerberos.yml
# vars:
#   ansible_galaxy: "/root/.local/bin/ansible-galaxy"

---

- name: Install Ansible Collections using ansible_galaxy
  hosts: ipaserver
  become: yes
  tasks:

    - name: Install cloudera.cluster collection from Git (main branch)
      ansible.builtin.shell:
        cmd: >
          {{ ansible_galaxy }} collection install
          git+https://github.com/cloudera-labs/cloudera.cluster.git,devel
      register: cloudera_result
      retries: 3
      delay: 5
      until: cloudera_result.rc == 0


---
- name: Enable Auto-TLS in Cloudera Manager
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Set up Cloudera Manager API URL
      ansible.builtin.import_tasks: common_tasks/set_cm_api_url.yml

    - name: Print Cloudera Manager API URL (in playbook)
      ansible.builtin.debug:
        msg: "cm_api_url is set to {{ cm_api_url }}"

    # - name: Configure Kerberos
    #   ansible.builtin.uri:
    #     url: "{{ cm_api_url }}/cm/kerberosConfig"
    #     method: PUT
    #     user: "{{ cm_admin_user }}"
    #     password: "{{ cm_admin_pass }}"
    #     force_basic_auth: yes
    #     body_format: json
    #     body:
    #       items:
    #         - name: "KDC_ADMIN_USER"
    #           value: "{{ kerberos_principal }}"
    #         - name: "KDC_ADMIN_PASSWORD"
    #           value: "{{ kerberos_password }}"
    #     status_code: 200
    #   register: kerberos_config

    # - name: Restart Cloudera Manager
    #   ansible.builtin.systemd:
    #     name: cloudera-scm-server
    #     state: restarted
    #   delegate_to: "{{ cm_host }}"

    # - name: Restart Cloudera Management Services
    #   ansible.builtin.uri:
    #     url: "{{ cm_api_url }}/cm/service/commands/restart"
    #     method: POST
    #     user: "{{ cm_admin_user }}"
    #     password: "{{ cm_admin_pass }}"
    #     force_basic_auth: yes
    #     status_code: 200

    # - name: Restart Cloudera Agent
    #   ansible.builtin.systemd:
    #     name: cloudera-scm-agent
    #     state: restarted
    #   delegate_to: "{{ item }}"
    #   loop: "{{ groups['all'] }}"



##### KDC integration with Cloudera Manager
---
- name: Enable Kerberos (KDC) for Cloudera Manager
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Set Cloudera Manager Host IP
      ansible.builtin.set_fact:
        cm_host: "{{ hostvars[groups['cldr-mngr'][0]].ansible_host }}" # Fetch IP of the first host in cldr-mngr group

    - name: Debug cm_host
      ansible.builtin.debug:
        msg: "cm_host is set to {{ cm_host }}"

    - name: Get Cloudera Manager API version
      ansible.builtin.uri:
        url: https://{{ cm_host }}:{{ cm_https_port }}/api/version
        method: GET
        status_code: [200, 301, 303]
        validate_certs: no
        user: "{{ cm_admin_user }}"
        password: "{{ cm_admin_pass }}"
        force_basic_auth: yes
        validate_certs: no
        return_content: yes
      register: result

    - name: Set base Cloudera Manager API URL
      ansible.builtin.set_fact:
        cm_api_url: "https://{{ cm_host }}:{{ cm_https_port }}/api/{{ result.content }}"

    - name: Print cm_api_url
      ansible.builtin.debug:
        msg: "cm_api_url is set to {{ cm_api_url }}"

    - name: Import KDC admin credentials into Cloudera Manager
      ansible.builtin.uri:
        url: "{{ cm_api_url }}/cm/commands/importAdminCredentials"
        method: POST
        user: "{{ cm_admin_user }}"
        password: "{{ cm_admin_pass }}"
        force_basic_auth: yes
        status_code: [200, 301, 303]
        validate_certs: no
        body_format: json
        validate_certs: no
        body: >
          {
            "username": "{{ krb5_kdc_admin_user }}",
            "password": "{{ krb5_kdc_admin_password }}"
          }
      register: kdc_response
      changed_when: "'already exists' not in kdc_response.json"
      failed_when:
        - kdc_result is failed
        - "'already exists' not in kdc_result.content"
      ignore_errors: yes
      notify: Restart Cloudera Manager

  handlers:
    - name: Restart Cloudera Manager
      ansible.builtin.uri:
        url: "{{ cm_api_url }}/cm/service/commands/restart"
        method: POST
        user: "{{ cm_admin_user }}"
        password: "{{ cm_admin_pass }}"
        force_basic_auth: yes
        status_code: [200, 301, 303]
        validate_certs: no
      changed_when: true






    - name: Import KDC admin credentials into Cloudera Manager
      cloudera.cluster.cm_api:
        endpoint: "/cm/commands/importAdminCredentials?username={{ krb5_kdc_admin_user | urlencode }}&password={{ krb5_kdc_admin_password | urlencode }}"
        method: POST
        username: "{{ cloudera_manager_api_user }}"
        password: "{{ cloudera_manager_api_password }}"
      register: kdc_result
      retries: 3
      delay: 10
      until: kdc_result is not failed
  
    - name: Restart Cloudera Management Services
      cloudera.cluster.cm_api:
        endpoint: "/cm/service/commands/restart"
        method: POST
        username: "{{ cloudera_manager_api_user }}"
        password: "{{ cloudera_manager_api_password }}"
      register: restart_result

    - name: Wait for Cloudera Manager services to restart
      pause:
        minutes: 2

  handlers:
    - name: Restart Cloudera Manager
      cloudera.cluster.cm_api:
        endpoint: "/cm/service/commands/restart"
        method: POST
        username: "{{ cloudera_manager_api_user }}"
        password: "{{ cloudera_manager_api_password }}"
      register: restart_result















### ansible-playbook -i inventory.ini 21_enable_cm_kerberos.yml
# vars:
#   ansible_galaxy: "/root/.local/bin/ansible-galaxy"

- name: Enable Cloudera Manager Kerberos
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    cm_host: "{{ hostvars[groups['cldr-mngr'][0]].ansible_host }}"
    cm_port: 7180
    cm_admin_user: "admin"
    cm_admin_pass: "admin"
    kerberos_realm: "{{ ipaserver_realm }}"
    krb5_kdc_admin_user: "{{ ipaadmin_principal }}"
    krb5_kdc_admin_password: "{{ ipaadmin_password }}"
    ipa_kdc_host: "ipaserver.{{ ipaserver_domain }}"
    ansible_galaxy: "/root/.local/bin/ansible-galaxy"
  tasks:
    - name: Print Cloudera Manager Host and IPA Server
      ansible.builtin.debug:
        msg:
          - "âœ… Using cm_host: {{ cm_host }}"
          - "âœ… Using IPA (KDC) host: {{ ipa_kdc_host }}"

    # - name: Print message if Kerberos already configured
    #   ansible.builtin.debug:
    #     msg: "âœ… Kerberos is already configured in Cloudera Manager. Skipping setup."
    #   when: __kerberos_status.status == 200

    - name: Setup Kerberos via Cloudera Manager API
      cloudera.cluster.cm_kerberos:
        host: "{{ cm_host }}"
        port: "7183"
        username: "{{ cm_admin_user }}"
        password: "{{ cm_admin_pass }}"
        security_realm: "{{ kerberos_realm }}"
        kdc_type: "Red Hat IPA"
        krb_enc_types: "aes256-cts aes128-cts rc4-hmac"
        kdc_admin_host: "{{ ipa_kdc_host }}"
        kdc_host: "{{ ipa_kdc_host }}"
        kdc_admin_user: "{{ krb5_kdc_admin_user }}@{{ kerberos_realm }}"
        kdc_admin_password: "{{ krb5_kdc_admin_password }}"
        verify_tls: false  # ðŸ”¥ disables certificate check
        force_tls: true
      register: __cm_kerberos

    - name: Print all cm_config name-value pairs in a single message
      ansible.builtin.debug:
        msg: |
          {% for item in __cm_kerberos.cm_config %}
          {{ item.name }}: {{ item.value }}
          {% endfor %}

    - name: Restart Cloudera Manager Services if KDC integration has made enabled
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: restarted
      loop:
        - cloudera-scm-server
        - cloudera-scm-agent
      when: (__cm_kerberos.json is defined) and (__cm_kerberos.json.success | default(false))
      delegate_to: cldr-mngr

    # Validate that Cloudera Manager is running after restart
    - name: Wait for Cloudera Manager Server to Start
      ansible.builtin.import_tasks: common_tasks/wait_for_cm_server_active.yml
      delegate_to: cldr-mngr
