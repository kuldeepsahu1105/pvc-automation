### ansible-playbook -i inventory.ini 22_setup_cm_autotls.yml
# vars:
#   cm_private_key_path: "/root/.ssh/id_rsa"
#   cm_priv_key_passphrase: ""
#   use_freeipa_for_crt_mgmt: false
#   cm_srvr_sudo_user: "root"
#   cm_node_sudo_password: ""  # Alternate Option for Priv Key based AutoTLS setup
---
- name: Enable Auto-TLS in Cloudera Manager
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Set up Cloudera Manager API URL
      ansible.builtin.import_tasks: common_tasks/set_cm_api_url.yml

    - name: Print Cloudera Manager API URL (in playbook)
      ansible.builtin.debug:
        msg: "cm_api_url is set to {{ cm_api_url }}"

    - name: Check if Cloudera Manager redirects HTTP to HTTPS (Auto-TLS status)
      ansible.builtin.uri:
        url: "{{ cm_api_url }}"
        method: GET
        user: "{{ cm_admin_user }}"
        password: "{{ cm_admin_pass }}"
        force_basic_auth: yes
        follow_redirects: none
        return_content: no
        validate_certs: no
        status_code: [200, 303, 404]
      register: cm_http_response
      ignore_errors: yes

    - name: Determine if Auto-TLS is enabled
      ansible.builtin.set_fact:
        autotls_enabled: "{{ cm_http_response.status == 303 }}"

    - name: Print Auto-TLS status
      ansible.builtin.debug:
        msg: "âœ… Auto-TLS is already enabled: {{ autotls_enabled }}"

    - name: Perform Auto-TLS setup only if not already enabled
      when: not autotls_enabled
      block:
        - name: Check if password authentication is used
          ansible.builtin.set_fact:
            use_password: "{{ cm_node_sudo_password is defined and cm_node_sudo_password | trim | length > 0 }}"

        - name: Create Auto-TLS JSON file (Password-based)
          ansible.builtin.template:
            src: auto-tls.json.j2
            dest: /tmp/auto-tls.json
          when: use_password

        - name: Enable Auto-TLS (Password-based)
          ansible.builtin.uri:
            url: "{{ cm_api_url }}/cm/commands/generateCmca"
            method: POST
            user: "{{ cm_admin_user }}"
            password: "{{ cm_admin_pass }}"
            force_basic_auth: yes
            body: "{{ lookup('file', '/tmp/auto-tls.json') }}"
            body_format: json
            timeout: 360
            status_code: [200, 301, 303]
            validate_certs: no
          when: use_password
          register: auto_tls_response
          ignore_errors: yes
          notify:
            - Restart Cloudera Manager Services after Auto-TLS setup

        - name: Create Auto-TLS JSON file (Key-based)
          ansible.builtin.template:
            src: auto-tls-key.json.j2
            dest: /tmp/auto-tls-key.json
          when: not use_password

        - name: Set private key as a single line (for Key-based)
          ansible.builtin.set_fact:
            node_key_one_line: "{{ lookup('file', cm_private_key_path) | replace('\n', '\\n') | replace('\"', '\\\"' ) }}"
          when: not use_password

        - name: Enable Auto-TLS (Key-based)
          ansible.builtin.uri:
            url: "{{ cm_api_url }}/cm/commands/generateCmca"
            method: POST
            user: "{{ cm_admin_user }}"
            password: "{{ cm_admin_pass }}"
            force_basic_auth: yes
            body: "{{ lookup('file', '/tmp/auto-tls-key.json') }}"
            body_format: json
            timeout: 360
            status_code: [200, 301, 303]
            validate_certs: no
          when: not use_password
          register: auto_tls_response
          ignore_errors: yes

        - name: Restart Cloudera Manager Services if Auto-TLS was triggered
          ansible.builtin.systemd:
            name: "{{ item }}"
            state: restarted
          loop:
            - cloudera-scm-server
            - cloudera-scm-agent
          when: (auto_tls_response.json is defined) and (auto_tls_response.json.success | default(false))
          delegate_to: cldr-mngr

    #       notify:
    #         - Restart Cloudera Manager Services after Auto-TLS setup

    # # Trigger handler immediately after Auto-TLS setup
    # - name: Flush handlers to restart Cloudera Manager immediately
    #   ansible.builtin.meta: flush_handlers

    # Validate that Cloudera Manager is running after restart
    - name: Wait for Cloudera Manager Server to Start
      ansible.builtin.import_tasks: common_tasks/wait_for_cm_server_active.yml
      delegate_to: cldr-mngr

    - name: Print Cloudera Manager Access URLs
      ansible.builtin.import_tasks: common_tasks/print_cm_urls.yml

  # handlers:
  #   - name: Restart Cloudera Manager Services after Auto-TLS setup
  #     systemd:
  #       name: "{{ item }}"
  #       state: restarted
  #     with_items:
  #       - cloudera-scm-server
  #       - cloudera-scm-agent
  #     when: auto_tls_response is succeeded
  #     delegate_to: cldr-mngr
