---
- name: Configure /etc/hosts file and Gather System Information
  hosts: all
  become: yes

  tasks:
    - name: Generate the /etc/hosts file from the template
      template:
        src: templates/etc_hosts.j2
        dest: /etc/hosts
      notify:
        - Restart networking

    - name: Ensure OS version is RHEL 9.x
      shell: cat /etc/*rel* | grep -E 'NAME|VERSION'
      register: os_version
      changed_when: false

    - name: Print OS version information
      debug:
        msg: "OS Version: {{ os_version.stdout }}"

    - name: Verify Hostname (Fully Qualified)
      command: hostname -f
      register: hostname_fqdn
      changed_when: false

    - name: Print Hostname (Fully Qualified)
      debug:
        msg: "Hostname (FQDN): {{ hostname_fqdn.stdout }}"

    - name: Verify Host IP Address
      command: hostname -i
      register: hostname_ip
      changed_when: false

    - name: Print Host IP Address
      debug:
        msg: "Hostname IP Address: {{ hostname_ip.stdout }}"

    - name: Verify /etc/hostname file content
      command: cat /etc/hostname
      register: hostname_file
      changed_when: false

    - name: Print /etc/hostname content
      debug:
        msg: "Content of /etc/hostname: {{ hostname_file.stdout }}"

    - name: Verify IP Address on eth0 interface
      shell: ip addr show eth0 | grep -e inet
      register: eth0_ip
      changed_when: false

    - name: Print eth0 IP Address
      debug:
        msg: "eth0 IP Address: {{ eth0_ip.stdout }}"

    - name: Verify IP Address on eth1 interface
      shell: "ip addr show eth1 | grep -e inet"
      register: eth1_ip
      changed_when: false
      failed_when: false  # Prevent failure if eth1 does not exist

    - name: Print eth1 IP Address (if available)
      debug:
        msg: "eth1 IP Address: {{ eth1_ip.stdout | default('eth1 not found, skipping...') }}"

    - name: Verify IP Address matching hostname
      shell: ip addr show | grep "$(hostname -i)"
      register: ip_match_hostname
      changed_when: false

    - name: Print IP matching Hostname
      debug:
        msg: "IP matching Hostname: {{ ip_match_hostname.stdout }}"

    # - name: Verify DNS Resolution for Hostname
    #   shell: host -v -t A "$(hostname)"
    #   register: dns_resolution
    #   changed_when: false

    # - name: Print DNS Resolution for Hostname
    #   debug:
    #     msg: "DNS Resolution for Hostname: {{ dns_resolution.stdout }}"

    - name: Verify Kernel Version
      command: uname -a
      register: kernel_version
      changed_when: false

    - name: Print Kernel Version
      debug:
        msg: "Kernel Version: {{ kernel_version.stdout }}"

  handlers:
    - name: Restart networking
      service:
        name: NetworkManager
        state: restarted
