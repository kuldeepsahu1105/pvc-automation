### ansible-playbook -i inventory.ini 19_start_cm.yml
# vars:
#   scm_db_name: "scm"
#   scm_db_user: "scm"
#   scm_db_password: "scm"
#   cm_db_ssl_crt_dir: "/var/lib/cloudera-scm-server/.postgresql"
#   cm_db_root_crt: "{{ cm_db_ssl_crt_dir }}/root.crt"
#   cldr_mngr_packages:
#     server:
#       - cloudera-manager-agent
#       - cloudera-manager-daemons
#       - cloudera-manager-server
#     client:
#       - cloudera-manager-agent
#       - cloudera-manager-daemons

---
- name: Install and Configure Cloudera Manager Server
  hosts: cldr-mngr
  become: yes
  tasks:
    # - name: Install OpenJDK
    #   ansible.builtin.dnf:
    #     name: "{{ java_package }}"
    #     state: present

    ##### Install the Cloudera Manager Server package
    - name: Install Cloudera Manager Server packages
      ansible.builtin.dnf:
        name: "{{ cldr_mngr_packages.server }}"
        state: present

    - name: Configure Cloudera Manager Agent
      ansible.builtin.lineinfile:
        path: /etc/cloudera-scm-agent/config.ini
        regexp: "^server_host="
        line: "server_host={{ ansible_fqdn }}"

    - name: Create PostgreSQL SSL directory
      ansible.builtin.file:
        path: "{{ cm_db_ssl_crt_dir }}"
        state: directory
        owner: cloudera-scm
        group: cloudera-scm
        mode: "0755"

    - name: Copy PostgreSQL root certificate
      ansible.builtin.copy:
        src: "{{ postgres_data_dir }}/root.crt"
        dest: "{{ cm_db_root_crt }}"
        remote_src: yes
        owner: cloudera-scm
        group: cloudera-scm
        mode: "0644"

    - name: Configure Ranger SSL
      ansible.builtin.copy:
        src: /usr/share/java/postgresql-connector-java.jar
        dest: /opt/cloudera/cm/lib/postgresql-connector.jar
        remote_src: yes

    - name: Remove existing PostgreSQL connector symlink
      ansible.builtin.file:
        path: "/opt/cloudera/cm/lib/postgresql-42.*.jar"
        state: absent

    ##### Generate db.properties file
    - name: Run scm_prepare_database.sh script
      ansible.builtin.command:
        cmd: >
          /opt/cloudera/cm/schema/scm_prepare_database.sh -h{{ ansible_fqdn }}
          --jdbc-url "jdbc:postgresql://{{ ansible_fqdn }}:{{ postgres_port }}/{{ scm_db_name }}?ssl=true&sslmode=verify-ca&sslrootcert={{ cm_db_root_crt }}"
          postgresql {{ scm_db_name }} {{ scm_db_user }} {{ scm_db_password }} --ssl
      register: scm_db_output
      changed_when: "'Successfully connected to database.' in scm_db_output.stdout"

    ##### Verify the Cloudera Manager Server updated configs
    - name: Print the updated db.properties file
      ansible.builtin.command:
        cmd: cat /etc/cloudera-scm-server/db.properties
      register: db_properties_output
      changed_when: false

    - name: Display db.properties contents
      ansible.builtin.debug:
        msg: "{{ db_properties_output.stdout_lines }}"

    - name: Print the updated config.ini file with updated server details
      ansible.builtin.command:
        cmd: grep server /etc/cloudera-scm-agent/config.ini
      register: config_ini_output
      changed_when: false

    - name: Display config.ini content with updated server details
      ansible.builtin.debug:
        msg: "{{ config_ini_output.stdout_lines }}"

    ##### CSD Installation
    - name: Create CSD directory
      file:
        path: /opt/cloudera/csd
        state: directory
        owner: cloudera-scm
        group: cloudera-scm
        mode: 0755
      # delegate_to: cldr-mngr

    - name: Download CSDs
      get_url:
        url: "{{ item }}"
        dest: /opt/cloudera/csd
        mode: 0644
      with_items: "{{ scm_csds }}"
      when: scm_csds is defined
      # delegate_to: cldr-mngr

    ##### Start and Enable the Cloudera Manager Server and Verify
    - name: Ensure Cloudera Manager services (Server and Agent) are enabled and started
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      notify:
        - wait cloudera-scm-server
      # with_items:
      loop:
        - cloudera-scm-server
        - cloudera-scm-agent
      # delegate_to: cldr-mngr
      register: cm_services_status

    # Trigger handler to wait for SCM to startup
    - meta: flush_handlers

    - name: Wait for Cloudera Manager Server to Start
      ansible.builtin.import_tasks: common_tasks/wait_for_cm_server_active.yml

  handlers:
    - name: wait cloudera-scm-server
      ansible.builtin.wait_for:
        port: 7180
        delay: 10
        timeout: 300

##### Setup agent config on rest of the hosts
- name: Install and Configure Cloudera Manager Agents
  hosts: all:!ipaserver:!cldr-mngr
  become: yes
  tasks:
    ##### Install the Cloudera Manager Agent package
    - name: Install Cloudera Manager Agent packages
      ansible.builtin.dnf:
        name: "{{ cldr_mngr_packages.client }}"
        state: present

    - name: Fetch config.ini from cldr-mngr
      ansible.builtin.fetch:
        src: /etc/cloudera-scm-agent/config.ini
        dest: /tmp/config.ini
        flat: yes
      delegate_to: cldr-mngr

    - name: Copy config.ini to all hosts
      ansible.builtin.copy:
        src: /tmp/config.ini
        dest: /etc/cloudera-scm-agent/config.ini
        owner: root
        group: root
        mode: "0644"

    - name: Print the updated config.ini file with updated server details
      ansible.builtin.command:
        cmd: grep server /etc/cloudera-scm-agent/config.ini
      register: config_ini_output
      changed_when: false

    - name: Display config.ini content with updated server details
      ansible.builtin.debug:
        msg: "{{ config_ini_output.stdout_lines }}"

    - name: Restart Cloudera Manager Agent
      ansible.builtin.systemd:
        name: cloudera-scm-agent
        state: restarted
        enabled: yes

##### Print CM UI HTTP Public URL
- name: Fetch and Print Cloudera Manager Public HTTP URL
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Get public IP of CM server from ipify
      ansible.builtin.uri:
        url: "https://api.ipify.org/"
        return_content: yes
      register: public_ip_result
      delegate_to: cldr-mngr

    - name: Print Cloudera Manager Public URL
      ansible.builtin.debug:
        msg: "Cloudera Manager Public HTTP URL: http://{{ public_ip_result.content }}:{{ cm_port }}/"

    - name: Print Cloudera Manager Private URL
      ansible.builtin.import_tasks: common_tasks/set_cm_api_url.yml
