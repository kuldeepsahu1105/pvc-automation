### ansible-playbook -i inventory.ini 20_setup_cm.yml

---
- name: Complete Cloudera Manager and CDH 7.1.9 Setup via API
  hosts: localhost
  gather_facts: no
  vars:
    cm_host: "cldr-mngr.cldrsetup.local"
    cm_user: "admin"
    cm_password: "admin"
    cluster_name: "CDH-Cluster"
    cdh_version: "7.1.9"
    parcel_repo: "https://archive.cloudera.com/cdh7/7.1.9/parcels/"
    license_file: "/path/to/license.txt"
    kerberos_principal: "admin/admin@EXAMPLE.COM"
    kerberos_password: "kerberos_password"
    license_file_name: "license.json"
  tasks:
    - name: Set Cloudera Manager API base URL
      ansible.builtin.set_fact:
        cm_api_url: "http://{{ cm_host }}:7180/api/v54"

    - name: Authenticate with Cloudera Manager API
      ansible.builtin.uri:
        url: "{{ cm_api_url }}/cm/version"
        method: GET
        user: "{{ cm_user }}"
        password: "{{ cm_password }}"
        force_basic_auth: yes
        status_code: 200
      register: cm_version

    - name: Print Cloudera Manager API Version Response
      ansible.builtin.debug:
        msg: "Cloudera Manager API Version: {{ cm_version.json }}"

    - name: Print Cloudera Manager API Version and Build Timestamp
      ansible.builtin.debug:
        msg: "Cloudera Manager Version: {{ cm_version.json.version }}, Build Timestamp: {{ cm_version.json.buildTimestamp }}"

    - name: Check existing Cloudera Manager license
      ansible.builtin.uri:
        url: "{{ cm_api_url }}/cm/license"
        method: GET
        user: "{{ cm_user }}"
        password: "{{ cm_password }}"
        force_basic_auth: yes
        return_content: yes
        status_code: [200, 404]  # 404 if no license installed
      register: cm_license_status
      changed_when: false

    - name: Check if Cloudera Manager license file exists
      ansible.builtin.stat:
        path: "{{ license_file_name }}"
      register: license_status
      when: cm_license_status.status == 404  # Upload only if license is missing

    - name: Upload Cloudera Manager license
      ansible.builtin.uri:
        url: "{{ cm_api_url }}/cm/license"
        method: POST
        user: "{{ cm_user }}"
        password: "{{ cm_password }}"
        force_basic_auth: yes
        body_format: json
        headers:
          Content-Type: "application/json"
        body:
          license: "{{ lookup('file', license_file_name) | b64encode }}"
      when: cm_license_status.status == 404 and license_status.stat.exists
      register: license_upload_response


    # - name: Check if Cloudera Manager license file exists
    #   ansible.builtin.stat:
    #     path: "{{ license_file_name }}"
    #   register: license_status

    # - name: Upload Cloudera Manager license
    #   ansible.builtin.uri:
    #     url: "{{ cm_api_url }}/cm/license"
    #     method: POST
    #     user: "{{ cm_user }}"
    #     password: "{{ cm_password }}"
    #     force_basic_auth: yes
    #     body_format: json
    #     headers:
    #       Content-Type: "application/json"
    #     body:
    #       license: "{{ lookup('file', license_file_name) | b64encode }}"
    #   when: license_status.stat.exists
    #   register: license_upload_response

    # - name: Enable Cloudera Manager Trial License
    #   ansible.builtin.uri:
    #     url: "{{ cm_api_url }}/cm/trialLicense"
    #     method: POST
    #     user: "{{ cm_user }}"
    #     password: "{{ cm_password }}"
    #     force_basic_auth: yes
    #     status_code: 200
    #   when: not license_status.stat.exists
    #   register: trial_license_response

    # - name: Print License Upload Status
    #   ansible.builtin.debug:
    #     msg: "âœ… License file uploaded successfully!"
    #   when: license_status.stat.exists

    - name: Print Trial License Activation Status
      ansible.builtin.debug:
        msg: "ðŸ”„ Started Cloudera Manager with Trial License! (License file not found in current directory)"
      when: not license_status.stat.exists

    # - name: Upload Cloudera Manager License
    #   ansible.builtin.uri:
    #     url: "{{ cm_api_url }}/cm/license"
    #     method: POST
    #     user: "{{ cm_user }}"
    #     password: "{{ cm_password }}"
    #     force_basic_auth: yes
    #     body_format: form-multipart
    #     body:
    #       license: "{{ lookup('file', license_file) | b64encode }}"
    #     status_code: 200
    #   register: license_upload

    # - name: Enable Cloudera Management Services
    #   ansible.builtin.uri:
    #     url: "{{ cm_api_url }}/cm/service"
    #     method: PUT
    #     user: "{{ cm_user }}"
    #     password: "{{ cm_password }}"
    #     force_basic_auth: yes
    #     body_format: json
    #     body:
    #       items:
    #         - name: "Cloudera Management Service"
    #           type: "MGMT"
    #     status_code: 200
    #   register: management_services

    # - name: Configure AutoTLS
    #   ansible.builtin.uri:
    #     url: "{{ cm_api_url }}/cm/config"
    #     method: PUT
    #     user: "{{ cm_user }}"
    #     password: "{{ cm_password }}"
    #     force_basic_auth: yes
    #     body_format: json
    #     body:
    #       items:
    #         - name: "SECURITY_AUTO_TLS"
    #           value: "true"
    #     status_code: 200
    #   register: autotls_config

    # - name: Configure Kerberos
    #   ansible.builtin.uri:
    #     url: "{{ cm_api_url }}/cm/kerberosConfig"
    #     method: PUT
    #     user: "{{ cm_user }}"
    #     password: "{{ cm_password }}"
    #     force_basic_auth: yes
    #     body_format: json
    #     body:
    #       items:
    #         - name: "KDC_ADMIN_USER"
    #           value: "{{ kerberos_principal }}"
    #         - name: "KDC_ADMIN_PASSWORD"
    #           value: "{{ kerberos_password }}"
    #     status_code: 200
    #   register: kerberos_config

    # - name: Create Cluster
    #   ansible.builtin.uri:
    #     url: "{{ cm_api_url }}/clusters/{{ cluster_name }}"
    #     method: POST
    #     user: "{{ cm_user }}"
    #     password: "{{ cm_password }}"
    #     force_basic_auth: yes
    #     body_format: json
    #     body:
    #       items:
    #         - name: "{{ cluster_name }}"
    #           version: "CDH{{ cdh_version }}"
    #     status_code: 201,409
    #   register: cluster_create

    # - name: Set Parcel Repository
    #   ansible.builtin.uri:
    #     url: "{{ cm_api_url }}/cm/config"
    #     method: PUT
    #     user: "{{ cm_user }}"
    #     password: "{{ cm_password }}"
    #     force_basic_auth: yes
    #     body_format: json
    #     body:
    #       items:
    #         - name: "REMOTE_PARCEL_REPO_URLS"
    #           value: "{{ parcel_repo }}"
    #     status_code: 200
    #   register: parcel_repo_set

    # - name: Download and Distribute Parcel
    #   ansible.builtin.uri:
    #     url: "{{ cm_api_url }}/clusters/{{ cluster_name }}/parcels/products/CDH/versions/{{ cdh_version }}/commands/startDistribution"
    #     method: POST
    #     user: "{{ cm_user }}"
    #     password: "{{ cm_password }}"
    #     force_basic_auth: yes
    #     status_code: 200
    #   register: parcel_distribution

    # - name: Activate Parcel
    #   ansible.builtin.uri:
    #     url: "{{ cm_api_url }}/clusters/{{ cluster_name }}/parcels/products/CDH/versions/{{ cdh_version }}/commands/activate"
    #     method: POST
    #     user: "{{ cm_user }}"
    #     password: "{{ cm_password }}"
    #     force_basic_auth: yes
    #     status_code: 200
    #   register: parcel_activation

    # - name: Install Base Cluster Services
    #   ansible.builtin.uri:
    #     url: "{{ cm_api_url }}/clusters/{{ cluster_name }}/services"
    #     method: POST
    #     user: "{{ cm_user }}"
    #     password: "{{ cm_password }}"
    #     force_basic_auth: yes
    #     body_format: json
    #     body:
    #       items:
    #         - name: "HDFS"
    #           type: "HDFS"
    #         - name: "YARN"
    #           type: "YARN"
    #         - name: "Hive"
    #           type: "HIVE"
    #         - name: "Ranger"
    #           type: "RANGER"
    #         - name: "Atlas"
    #           type: "ATLAS"
    #         - name: "Zookeeper"
    #           type: "ZOOKEEPER"
    #         - name: "Kafka"
    #           type: "KAFKA"
    #         - name: "HBase"
    #           type: "HBASE"
    #         - name: "Phoenix"
    #           type: "PHOENIX"
    #         - name: "Impala"
    #           type: "IMPALA"
    #         - name: "Tez"
    #           type: "TEZ"
    #         - name: "Hive-on-Tez"
    #           type: "HIVE_ON_TEZ"
    #     status_code: 200
    #   register: service_installation
