### ansible-playbook -i inventory.ini 15_setup_wildcard.yml
# vars:
#   ipaserver_domain: cldrsetup.local
#   ipaadmin_password: "vmware123"
#   wildcard_dns_record: "*.apps"
#   postgres_jdbc_version: "42.7.5"

---
- name: Configure wildcard DNS record
  hosts: ipaserver
  become: true

  tasks:
    - name: Get ECS Master IP dynamically
      set_fact:
        ecs_master_ip: "{{ hostvars[groups['ecs-masters'][0]]['ansible_host'] | default(hostvars[groups['ecs-masters'][0]]['ansible_default_ipv4']['address']) }}"

    - name: Debug ECS Master IP
      debug:
        msg: "ECS Master IP is {{ ecs_master_ip }}"

    - name: Add wildcard DNS record for ECS
      freeipa.ansible_freeipa.ipadnsrecord:
        ipaadmin_password: "{{ ipaadmin_password }}"
        zone_name: "{{ ipaserver_domain }}"
        record_name: "{{ wildcard_dns_record }}"
        record_type: "A"
        record_value: "{{ ecs_master_ip }}"
        state: present

    - name: Verify Created Wildcard DNS Records in FreeIPA
      shell: "ipa dnsrecord-find {{ ipaserver_domain }} --name=*.apps"
      register: ipa_dns_records
      changed_when: false

    - name: Print Wildacard FreeIPA DNS Records
      debug:
        msg: "{{ ipa_dns_records.stdout_lines }}"

    - name: Validate Wildcard DNS resolution using nslookup
      command: "nslookup console-cdp.apps.{{ ipaserver_domain }}"
      register: nslookup_output
      changed_when: false

    - name: Display nslookup output for Wildcard DNS lookup
      debug:
        msg: "{{ nslookup_output.stdout.replace('\t', '    ').split('\n') }}"

    - name: Validate IP resolution using nslookup
      command: "nslookup {{ ecs_master_ip }}"
      register: nslookup_output
      changed_when: false

    - name: Display nslookup output for IP
      debug:
        msg: "{{ nslookup_output.stdout.replace('\t', '    ').split('\n') }}"

    - name: Validate DNS resolution using dig
      command: "dig console-cdp.apps.{{ ipaserver_domain }} A"
      register: dig_output
      changed_when: false

    - name: Display dig output
      debug:
        msg: "{{ dig_output.stdout.replace('\t', '    ').split('\n') }}"

    - name: Reverse lookup validation
      command: "dig -x {{ ecs_master_ip }}"
      register: reverse_lookup
      changed_when: false

    - name: Display reverse lookup result
      debug:
        msg: "{{ reverse_lookup.stdout.replace('\t', '    ').split('\n') }}"

# need to test this once bcoz donwload url was not working
- name: Download PostgreSQL JDBC driver
  hosts: all
  become: true
  tasks:
    - name: Download PostgreSQL JDBC driver jar file
      get_url:
        url: "https://jdbc.postgresql.org/download/postgresql-{{ postgres_jdbc_version }}.jar"
        dest: "/tmp/postgresql-{{ postgres_jdbc_version }}.jar"
        mode: "0644"
      register: jdbc_download
      retries: 3
      delay: 5
      until: jdbc_download is succeeded

    - name: Verify JDBC driver download
      stat:
        path: "/tmp/postgresql-{{ postgres_jdbc_version }}.jar"
      register: jdbc_file_check

    - name: Debug - Check if JDBC file is present
      debug:
        msg: "JDBC file exists: {{ jdbc_file_check.stat.exists }}"

- name: Distribute JDBC driver to all hosts
  hosts: all
  become: true
  tasks:
    - name: Copy JDBC driver from IPA server to all hosts
      copy:
        src: "/tmp/postgresql-{{ postgres_jdbc_version }}.jar"
        dest: "/usr/share/java/postgresql-connector-java.jar"
        mode: "0644"
        remote_src: yes

    - name: Debug - Check if file exists after copying
      command: "ls -l /usr/share/java/postgresql-connector-java.jar"
      register: jdbc_file_check
      ignore_errors: true

    - name: Debug output for JDBC file existence
      debug:
        var: jdbc_file_check.stdout_lines

    - name: Verify JDBC driver file
      command: "ls -l /usr/share/java/postgresql-connector-java.jar"
      register: jdbc_ls_output
      changed_when: false

    - name: Display JDBC driver file details
      debug:
        var: jdbc_ls_output.stdout_lines
