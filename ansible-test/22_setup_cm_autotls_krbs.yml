### ansible-playbook -i inventory.ini 20_verify_cm.yml
# vars:
#   cm_private_key_path: "/root/.ssh/id_rsa" 
#   cm_priv_key_passphrase: "" 
#   use_freeipa_for_crt_mgmt: false 
#   cm_srvr_sudo_user: "root"
#   cm_node_sudo_password: ""  # Alternate Option for Priv Key based AutoTLS setup
---
- name: Enable Auto-TLS in Cloudera Manager
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Set up Cloudera Manager API URL
      ansible.builtin.import_tasks: common_tasks/set_cm_api_url.yml

    - name: Print Cloudera Manager API URL (in playbook)
      ansible.builtin.debug:
        msg: "cm_api_url is set to {{ cm_api_url }}"

    - name: Check if Cloudera Manager redirects HTTP to HTTPS (Auto-TLS status)
      ansible.builtin.uri:
        url: "{{ cm_api_url }}"
        method: GET
        user: "{{ cm_admin_user }}"
        password: "{{ cm_admin_pass }}"
        force_basic_auth: yes
        follow_redirects: none
        return_content: no
        validate_certs: no
        status_code: [200, 303]
      register: cm_http_response
      ignore_errors: yes

    - name: Determine if Auto-TLS is enabled
      ansible.builtin.set_fact:
        autotls_enabled: "{{ cm_http_response.status == 303 }}"

    - name: Print Auto-TLS status
      ansible.builtin.debug:
        msg: "Auto-TLS is already enabled: {{ autotls_enabled }}"

    - name: Perform Auto-TLS setup only if not already enabled
      when: not autotls_enabled
      block:
        - name: Check if password authentication is used
          ansible.builtin.set_fact:
            use_password: "{{ cm_node_sudo_password is defined and cm_node_sudo_password | trim | length > 0 }}"

        - name: Create Auto-TLS JSON file (Password-based)
          ansible.builtin.template:
            src: auto-tls.json.j2
            dest: /tmp/auto-tls.json
          when: use_password

        - name: Enable Auto-TLS (Password-based)
          ansible.builtin.uri:
            url: "{{ cm_api_url }}/cm/commands/generateCmca"
            method: POST
            user: "{{ cm_admin_user }}"
            password: "{{ cm_admin_pass }}"
            force_basic_auth: yes
            body: "{{ lookup('file', '/tmp/auto-tls.json') }}"
            body_format: json
            timeout: 360
            status_code: [200, 301, 303]
            validate_certs: no
          when: use_password
          register: auto_tls_response
          ignore_errors: yes
          notify:
            - Restart Cloudera Manager Services after Auto-TLS setup

        - name: Create Auto-TLS JSON file (Key-based)
          ansible.builtin.template:
            src: auto-tls-key.json.j2
            dest: /tmp/auto-tls-key.json
          when: not use_password

        - name: Set private key as a single line (for Key-based)
          ansible.builtin.set_fact:
            node_key_one_line: "{{ lookup('file', cm_private_key_path) | replace('\n', '\\n') | replace('\"', '\\\"' ) }}"
          when: not use_password

        - name: Enable Auto-TLS (Key-based)
          ansible.builtin.uri:
            url: "{{ cm_api_url }}/cm/commands/generateCmca"
            method: POST
            user: "{{ cm_admin_user }}"
            password: "{{ cm_admin_pass }}"
            force_basic_auth: yes
            body: "{{ lookup('file', '/tmp/auto-tls-key.json') }}"
            body_format: json
            timeout: 360
            status_code: [200, 301, 303]
            validate_certs: no
          when: not use_password
          register: auto_tls_response
          ignore_errors: yes
          notify:
            - Restart Cloudera Manager Services after Auto-TLS setup

    # Trigger handler immediately after Auto-TLS setup
    - name: Flush handlers to restart Cloudera Manager immediately
      ansible.builtin.meta: flush_handlers

    # Validate that Cloudera Manager is running after restart
    - name: Wait for Cloudera Manager Server to Start
      ansible.builtin.import_tasks: common_tasks/wait_for_cm_server_active.yml
      delegate_to: cldr-mngr

  handlers:
    - name: Restart Cloudera Manager Services after Auto-TLS setup
      systemd:
        name: "{{ item }}"
        state: restarted
      with_items:
        - cloudera-scm-server
        - cloudera-scm-agent
      when: auto_tls_response is succeeded
      delegate_to: cldr-mngr











    # - name: Configure Kerberos
    #   ansible.builtin.uri:
    #     url: "{{ cm_api_url }}/cm/kerberosConfig"
    #     method: PUT
    #     user: "{{ cm_admin_user }}"
    #     password: "{{ cm_admin_pass }}"
    #     force_basic_auth: yes
    #     body_format: json
    #     body:
    #       items:
    #         - name: "KDC_ADMIN_USER"
    #           value: "{{ kerberos_principal }}"
    #         - name: "KDC_ADMIN_PASSWORD"
    #           value: "{{ kerberos_password }}"
    #     status_code: 200
    #   register: kerberos_config

    # - name: Restart Cloudera Manager
    #   ansible.builtin.systemd:
    #     name: cloudera-scm-server
    #     state: restarted
    #   delegate_to: "{{ cm_host }}"

    # - name: Restart Cloudera Management Services
    #   ansible.builtin.uri:
    #     url: "{{ cm_api_url }}/cm/service/commands/restart"
    #     method: POST
    #     user: "{{ cm_admin_user }}"
    #     password: "{{ cm_admin_pass }}"
    #     force_basic_auth: yes
    #     status_code: 200

    # - name: Restart Cloudera Agent
    #   ansible.builtin.systemd:
    #     name: cloudera-scm-agent
    #     state: restarted
    #   delegate_to: "{{ item }}"
    #   loop: "{{ groups['all'] }}"



##### KDC integration with Cloudera Manager
---
- name: Enable Kerberos (KDC) for Cloudera Manager
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Set Cloudera Manager Host IP
      ansible.builtin.set_fact:
        cm_host: "{{ hostvars[groups['cldr-mngr'][0]].ansible_host }}" # Fetch IP of the first host in cldr-mngr group

    - name: Debug cm_host
      ansible.builtin.debug:
        msg: "cm_host is set to {{ cm_host }}"

    - name: Get Cloudera Manager API version
      ansible.builtin.uri:
        url: https://{{ cm_host }}:{{ cm_https_port }}/api/version
        method: GET
        status_code: [200, 301, 303]
        validate_certs: no
        user: "{{ cm_admin_user }}"
        password: "{{ cm_admin_pass }}"
        force_basic_auth: yes
        validate_certs: no
        return_content: yes
      register: result

    - name: Set base Cloudera Manager API URL
      ansible.builtin.set_fact:
        cm_api_url: "https://{{ cm_host }}:{{ cm_https_port }}/api/{{ result.content }}"

    - name: Print cm_api_url
      ansible.builtin.debug:
        msg: "cm_api_url is set to {{ cm_api_url }}"

    - name: Import KDC admin credentials into Cloudera Manager
      ansible.builtin.uri:
        url: "{{ cm_api_url }}/cm/commands/importAdminCredentials"
        method: POST
        user: "{{ cm_admin_user }}"
        password: "{{ cm_admin_pass }}"
        force_basic_auth: yes
        status_code: [200, 301, 303]
        validate_certs: no
        body_format: json
        validate_certs: no
        body: >
          {
            "username": "{{ krb5_kdc_admin_user }}",
            "password": "{{ krb5_kdc_admin_password }}"
          }
      register: kdc_response
      changed_when: "'already exists' not in kdc_response.json"
      failed_when:
        - kdc_result is failed
        - "'already exists' not in kdc_result.content"
      ignore_errors: yes
      notify: Restart Cloudera Manager

  handlers:
    - name: Restart Cloudera Manager
      ansible.builtin.uri:
        url: "{{ cm_api_url }}/cm/service/commands/restart"
        method: POST
        user: "{{ cm_admin_user }}"
        password: "{{ cm_admin_pass }}"
        force_basic_auth: yes
        status_code: [200, 301, 303]
        validate_certs: no
      changed_when: true






    - name: Import KDC admin credentials into Cloudera Manager
      cloudera.cluster.cm_api:
        endpoint: "/cm/commands/importAdminCredentials?username={{ krb5_kdc_admin_user | urlencode }}&password={{ krb5_kdc_admin_password | urlencode }}"
        method: POST
        username: "{{ cloudera_manager_api_user }}"
        password: "{{ cloudera_manager_api_password }}"
      register: kdc_result
      retries: 3
      delay: 10
      until: kdc_result is not failed
  
    - name: Restart Cloudera Management Services
      cloudera.cluster.cm_api:
        endpoint: "/cm/service/commands/restart"
        method: POST
        username: "{{ cloudera_manager_api_user }}"
        password: "{{ cloudera_manager_api_password }}"
      register: restart_result

    - name: Wait for Cloudera Manager services to restart
      pause:
        minutes: 2

  handlers:
    - name: Restart Cloudera Manager
      cloudera.cluster.cm_api:
        endpoint: "/cm/service/commands/restart"
        method: POST
        username: "{{ cloudera_manager_api_user }}"
        password: "{{ cloudera_manager_api_password }}"
      register: restart_result
